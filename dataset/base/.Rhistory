rm (list=ls())
source('http://cemin.wikidot.com/local--files/raisr/rais.r')
source('http://cemin.wikidot.com/local--files/raisr/rais.r')
rm(list=ls())
rm(list=ls())
setwd("C:/Users/igorf/Documents/GitHub/dissertacao/dataset/base")
base <- read.csv("base.csv",sep=";",dec=".")
table(base$polos)
if(!require(psych))
install.packages("psych")
if(!require(plm))
install.packages("plm")
if(!require(tidyverse))
install.packages("tidyverse")
if(!require(stargazer))
install.packages("stargazer")
if(!require(matchit))
install.packages("matchit")
if(!require(Matchit))
install.packages("Matchit")
View(base)
mod_match <- matchit(prod_soja ~ valores.totais + vaba + est_pop,
data=base,method="nearest",ratio=1)
if(!require(MatchIt))
install.packages("MatchIt")
mod_match <- matchit(prod_soja ~ valores.totais + vaba + est_pop,
data=base,method="nearest",ratio=1)
library("MatchIt")
mod_match <- matchit(prod_soja ~ valores.totais + vaba + est_pop,
data=base,method="nearest",ratio=1)
mod_match <- matchit(polos ~ valores.totais + vaba + est_pop,
data=base,method="nearest",ratio=1)
View(base)
View(mod_match)
summary(mod_match)
base_prop<-match.data(mod_match)
View(base_prop)
table(base_prop$polos)
View(base_prop)
table(base_prop$ano)
View(base_prop)
View(base_prop)
reg1 <- lm(prod_soja ~ polos + semiarido + d.bio + pib.per.capta,
data=base_prop)
summary(reg1)
rm(list=ls())
base <- read.csv("base.csv",sep=";",dec=".")
mod_match <- matchit(polos ~ valores.totais + vaba + est_pop,
data=base,method="nearest",ratio=2)
summary(mod_match)
base_prop<-match.data(mod_match)
table(base_prop$polos)
mod_match <- matchit(polos ~ valores.totais + vaba + est_pop,
data=base,method="nearest",ratio=1)
summary(mod_match)
base_prop<-match.data(mod_match)
table(base_prop$polos)
View(base_prop)
rm(list=ls())
base <- read.csv("base.csv",sep=";",dec=".")
mod_match <- matchit(polos ~ valores.totais + vaba + est_pop,
data=base,method="nearest",ratio=1)
summary(mod_match)
psm<-match.data(mod_match)
table(psm$polos)
rm(list=ls())
mod_match <- matchit(polos ~ valores.totais + vaba + est_pop,
data=base,method="nearest",ratio=1)
summary(mod_match)
psm<-match.data(mod_match)
table(psm$polos)
base <- read.csv("base.csv",sep=";",dec=".")
mod_match <- matchit(polos ~ valores.totais + vaba + est_pop,
data=base,method="nearest",ratio=1)
summary(mod_match)
psm<-match.data(mod_match)
table(psm$polos)
View(psm)
table(psm$weights)
table(psm$prod_dende)
psm <- psm %>%
mutate(data_treat=if_else(ano>2004,1,0))
table(psm$data_treat)
View(psm)
psm <- psm %>%
mutate(estimador_dd=polos*data_treat)
table(psm$estimador_dd)
View(psm)
View(psm)
reg_dd <- lm(prod_soja ~ polos + data_treat + estimador_dd,
data=psm)
summary(reg_dd)
View(psm)
reg_ef <- plm(prod_soja ~ polos + data_treat + estimador_dd,
model="within", index=c("chave","ano"),data=psm)
library(plm)
install.packages("plm")
install.packages("plm")
library(plm)
reg_ef <- plm(prod_soja ~ polos + data_treat + estimador_dd,
model="within", index=c("chave","ano"),data=psm)
summary(red_ef)
summary(reg_ef)
rm(reg_dd,reg_ef)
rm(mod_match)
painel <- pdata.frame(psm,index=c("chave","ano"))
View(painel)
View(painel)
View(painel)
reg <- plm(prod_soja ~ polos + estimador_dd + d.bio + pib.per.capta,
model="pooling")
reg <- plm(prod_soja ~ polos + estimador_dd + d.bio + pib.per.capta,
data=painel,model="pooling")
summary(reg)
summary(reg)
View(reg)
reg <- plm(prod_soja ~ estimador_dd + d.bio + pib.per.capta,
data=painel,model="pooling")
summary(reg)
reg <- plm(prod_soja ~ estimador_dd + d.bio + pib.per.capta,
data=painel,model="pooling")
summary(reg)
reg <- plm(prod_soja ~ polos + estimador_dd + d.bio,
data=painel,model="pooling")
summary(reg)
reg_ef <- plm(prod_soja ~ polos + estimador_dd + d.bio,
data=painel,model="Whithin")
reg_ef <- plm(prod_soja ~ polos + estimador_dd + d.bio,
data=painel,model="Within")
reg_ef <- plm(prod_soja ~ polos + estimador_dd + d.bio,
data=painel,model="within")
summary(reg_ef)
reg_ea <- plm(prod_soja ~ polos + estimador_dd + d.bio,
data=painel,model="randon")
summary(reg_ea)
reg_ea <- plm(prod_soja ~ polos + estimador_dd + d.bio,
data=painel,model="random")0
reg_ea <- plm(prod_soja ~ polos + estimador_dd + d.bio,
data=painel,model="random")
summary(reg_ea)
plmtest(reg)
pftest(reg_ef,reg)
pFtest(reg_ef,reg)
phtest(reg_ea,reg_ef)
View(psm)
View(painel)
rm(list=ls())
#Diretório local de trabalho----
setwd("C:/Users/igorf/Documents/GitHub/dissertacao/dataset/base")
#Importando pacotes para trabalho----
if(!require(dplyr))
install.packages("dplyr")
if(!require(MatchIt))
install.packages("MatchIt")
#Limpando memória----
rm(list=ls())
#Importando base de dados----
base <- read.csv("base.csv",sep=";",dec=".")
#Iniciando matching----
matching <- matchit(polos ~ valores.totais + vaba + est_pop,
data=base,method="nereast",ratio=1)
summary(matching)
#Declarando base após matching----
psm <- match.data(matching)
#Exportando base pareada----
write.table(psm,file='psm.csv',sep=';',dec=".",na="",quote=TRUE, row.names=FALSE)
#Diretório local de trabalho----
setwd("C:/Users/igorf/Documents/GitHub/dissertacao/dataset/base")
#Importando pacotes para trabalho----
if(!require(dplyr))
install.packages("dplyr")
if(!require("MatchIt"))
install.packages("MatchIt")
#Limpando memória----
rm(list=ls())
#Importando base de dados----
base <- read.csv("base.csv",sep=";",dec=".")
#Iniciando matching----
matching <- matchit(polos ~ valores.totais + vaba + est_pop,
data=base,method="nereast",ratio=1)
summary(matching)
#Declarando base após matching----
psm <- match.data(matching)
#Exportando base pareada----
write.table(psm,file='psm.csv',sep=';',dec=".",na="",quote=TRUE, row.names=FALSE)
#Diretório local de trabalho----
setwd("C:/Users/igorf/Documents/GitHub/dissertacao/dataset/base")
#Importando pacotes para trabalho----
if(!require(dplyr))
install.packages("dplyr")
if(!require(MatchIt))
install.packages("MatchIt")
#Limpando memória----
rm(list=ls())
#Importando base de dados----
base <- read.csv("base.csv",sep=";",dec=".")
#Iniciando matching----
matching <- matchit(polos ~ valores.totais + vaba + est_pop,
data=base,method="nereast",ratio=1)
library("MatchIt")
matching <- matchit(polos ~ valores.totais + vaba + est_pop,
data=base,method="nereast",ratio=1)
