#específico de algorítmo chamado: nearest neighbor propensity score matching
#4. Examinar o balanceamento das covariaveis depois do matching
#Qual o efeito de estar alocado no projeto polos de biodiesel e produzir
#oleaginosas sobre a produtividade, rendimento médio e salários médios pagos nas
#culturas relacionadas?
#Podemos considerar estes municípios, na média, iguais?
#Não. Então temos de usar propensity score matching para obter estimativas
#causais mais criveis do efeito observado do projeto polos de biodiesel.
#Passo a passo
#1. Estimar os propensity scores (a probabilidade de ser tratado dado uma série
#de covariáveis do efeito observado do projeto polos de biodiesel)
#2. Examinar qual a região de suporte comum.
#3. Escolher e executar o algoritmo de matching. Neste caso, vamos usar um tipo
#específico de algorítmo chamado: nearest neighbor propensity score matching
#4. Examinar o balanceamento das covariaveis depois do matching
#Importando pacotes para trabalho----
if(!require(dplyr))
install.packages("dplyr")
if(!require(MatchIt))
install.packages("MatchIt")
if(!require(plm))
install.packages("plm")
if(!require(stargazer))
install.packages("stargazer")
if(!require(ggplot2))
install.packages("ggplot2")
#Limpando memória----
rm(list=ls())
#Importando base de dados----
base <- "https://raw.githubusercontent.com/igorfdeoliv/dissertacao/main/dataset/base/base.csv"
pnpb <- read.csv(base,sep=";",dec=".")
rm(base)
#Análise descritiva das variáveis de interesse antes do pareamento----
#Produtividade da soja (quantidade(t)/área plantada(hec))
pnpb %>%
group_by(polos) %>%
summarise(n_municipios = n(),
mean_match = mean(prod_soja),
std_error = sd(prod_soja) / sqrt(n_municipios))
#Rendimento médio da soja (R$/quantidade(t))
pnpb %>%
group_by(polos) %>%
summarise(n_municipios = n(),
mean_match = mean(rm_soja),
std_error = sd(rm_soja) / sqrt(n_municipios))
#Salários médios pagos a produtores e trabalhadores da cultura de soja
pnpb %>%
group_by(polos) %>%
summarise(n_municipios = n(),
mean_match = mean(s.soja),
std_error = sd(s.soja) / sqrt(n_municipios))
################################################################################
#A diferença de média é estatisticamente significativa a 95% de
#confidencialidade:
#Produtividade da soja (quantidade(t)/área plantada(hec))
with(pnpb, t.test(prod_soja ~ polos))
#Rendimento médio da soja (R$/quantidade(t))
with(pnpb, t.test(rm_soja ~ polos))
#Salários médios pagos a produtores e trabalhadores da cultura de soja
with(pnpb, t.test(s.soja ~ polos))
#p-valor < 0.05, rejeita H0, existem evidências de que as médias são diferentes.
################################################################################
#Diferença de médias: variáveis de pré-tratamento----
#total.contratos: número de contratos via PRONAF
#valores.totais: valores totais recebidos por município via PRONAF, deflacionado pelo IPCA (base=2017)
#d.bio: proxy de demanda de biodiesel, número de ônibus e caminhões por município
#pib.per.capta: valor do pib per capta municipal, deflacionado pelo IPCA (base=2017)
pnpb_cov <- c('total.contratos','valores.totais','d.bio','vaba','t')
pnpb %>%
group_by(polos) %>%
select(one_of(pnpb_cov)) %>%
summarise_all(funs(mean(.,na.rm=TRUE)))
lapply(pnpb_cov,function(v) {
t.test(pnpb[,v] ~ pnpb[,'polos'])
})
################################################################################
m_ps <- glm(polos ~ total.contratos + valores.totais + d.bio +
vaba + t,family=binomial(),data=pnpb)
summary(m_ps)
stargazer(m_ps,type='text',dep.var.labels=c('Tratamento'), out='Modelo0.html')
#Calculando as probabilidades de participar do programa:
prs_df <- data.frame(pr_score=predict(m_ps,type="response"),
polos=m_ps$model$polos)
head(prs_df)
################################################################################
labs <- paste('Participa do Projeto Polos de Biodiesel:',c("Sim","Não"))
prs_df %>%
mutate(polos=ifelse(polos==1, labs[1],labs[2]
)) %>%
ggplot(aes(x=pr_score)) + geom_histogram(color="white") +
facet_wrap(~polos) + xlab('Probabilidade de participar do projeto polos') +
ylab('Nº Municípios') +
theme_bw()
################################################################################
#Esse comando é necessário quando existem variáveis missing na amostra.
#  pnpb_nomiss <- pnpb %>%
#    select(prod_soja,polos,one_of(pnpb_cov)) %>%
#    na.omit()
#Verifica a dimensão do data frame após a exclusão das missings
#  dim(pnpb)
#  dim(pnpb_nomiss)
#Iniciando matching----
matching <- matchit(polos ~ total.contratos + valores.totais + d.bio +
vaba + t,data=pnpb,link="probit",method="nearest",
ratio=1)
summary(matching)
plot(matching)
ggplot(matching)
bal.plot(matching,var.name='distância')
if(!require(cobalt))
install.packages('cobalt')
bal.plot(matching,var.name='distância')
library(cobalt)
bal.plot(matching,var.name='distância')
bal.plot(matching,var.name='distance')
matching <- matchit(polos ~ total.contratos + valores.totais + d.bio +
vaba + t,data=pnpb,link="probit",method="nearest",
ratio=5)
summary(matching)
#  if(!require(cobalt))
#    install.packages('cobalt')
#  library(cobalt)
bal.plot(matching,var.name='distance')
matching <- matchit(polos ~ total.contratos + valores.totais + d.bio +
vaba + t,data=pnpb,link="probit",method="nearest",
ratio=2)
summary(matching)
#  if(!require(cobalt))
#    install.packages('cobalt')
#  library(cobalt)
bal.plot(matching,var.name='distance')
matching <- matchit(polos ~ total.contratos + valores.totais + d.bio +
vaba + t,data=pnpb,link="probit",method="nearest",
ratio=1)
summary(matching)
bal.plot(matching,var.name='distance')
if(!require(gridExtra))
install.packages('gridExtra')
fn_bal <- function(dta, variable) {
dta$variable <- dta[, variable]
if (variable == 'EmploymentPre') dta$variable <- dta$variable
dta$NJ.PA <- as.factor(dta$NJ.PA)
support <- c(min(dta$variable), max(dta$variable))
ggplot(dta, aes(x = distance, y = variable, color = NJ.PA)) +
geom_point(alpha = 0.2, size = 1.3) +
geom_smooth(method = "loess", se = F) +
xlab("Propensity score") +
ylab(variable) +
theme_bw() +
ylim(support)
}
grid.arrange(
fn_bal(matching, "total.contratos"),
fn_bal(matching, "valores.totais") + theme(legend.position = "none"),
fn_bal(matching, "d.bio"),
fn_bal(matching, "vaba") + theme(legend.position = "none"),
fn_bal(matching, "t"),
nrow = 3, widths = c(1.3, 1.3)
)
grid.arrange(
fn_bal(matching, "total.contratos"),
fn_bal(matching, "valores.totais") + theme(legend.position = "none"),
fn_bal(matching, "d.bio"),
fn_bal(matching, "vaba") + theme(legend.position = "none"),
fn_bal(matching, "t"),
nrow = 2, widths = c(1.3, 1.3)
)
grid.arrange(
fn_bal(matching, "total.contratos"),
fn_bal(matching, "valores.totais") + theme(legend.position = "none"),
fn_bal(matching, "d.bio"),
fn_bal(matching, "vaba") + theme(legend.position = "none"),
fn_bal(matching, "t"),
nrow = 4, widths = c(1.3, 1.3)
)
rm(list=ls())
q()
#Qual o efeito de estar alocado no projeto polos de biodiesel e produzir
#oleaginosas sobre a produtividade, rendimento médio e salários médios pagos nas
#culturas relacionadas?
#Podemos considerar estes municípios, na média, iguais?
#Não. Então temos de usar propensity score matching para obter estimativas
#causais mais criveis do efeito observado do projeto polos de biodiesel.
#Passo a passo
#1. Estimar os propensity scores (a probabilidade de ser tratado dado uma série
#de covariáveis do efeito observado do projeto polos de biodiesel)
#2. Examinar qual a região de suporte comum.
#3. Escolher e executar o algoritmo de matching. Neste caso, vamos usar um tipo
#específico de algorítmo chamado: nearest neighbor propensity score matching
#4. Examinar o balanceamento das covariaveis depois do matching
#Qual o efeito de estar alocado no projeto polos de biodiesel e produzir
#oleaginosas sobre a produtividade, rendimento médio e salários médios pagos nas
#culturas relacionadas?
#Podemos considerar estes municípios, na média, iguais?
#Não. Então temos de usar propensity score matching para obter estimativas
#causais mais criveis do efeito observado do projeto polos de biodiesel.
#Passo a passo
#1. Estimar os propensity scores (a probabilidade de ser tratado dado uma série
#de covariáveis do efeito observado do projeto polos de biodiesel)
#2. Examinar qual a região de suporte comum.
#3. Escolher e executar o algoritmo de matching. Neste caso, vamos usar um tipo
#específico de algorítmo chamado: nearest neighbor propensity score matching
#4. Examinar o balanceamento das covariaveis depois do matching
#Importando pacotes para trabalho----
if(!require(cobalt))
install.packages('cobalt')
if(!require(dplyr))
install.packages("dplyr")
if(!require(ggplot2))
install.packages("ggplot2")
if(!require(MatchIt))
install.packages("MatchIt")
if(!require(plm))
install.packages("plm")
if(!require(stargazer))
install.packages("stargazer")
#Limpando memória----
rm(list=ls())
#Importando base de dados----
base <- "https://raw.githubusercontent.com/igorfdeoliv/dissertacao/main/dataset/base/base.csv"
pnpb <- read.csv(base,sep=";",dec=".")
rm(base)
#Análise descritiva das variáveis de interesse antes do pareamento----
#Produtividade da soja (quantidade(t)/área plantada(hec))
pnpb %>%
group_by(polos) %>%
summarise(n_municipios = n(),
mean_match = mean(prod_soja),
std_error = sd(prod_soja) / sqrt(n_municipios))
#Rendimento médio da soja (R$/quantidade(t))
pnpb %>%
group_by(polos) %>%
summarise(n_municipios = n(),
mean_match = mean(rm_soja),
std_error = sd(rm_soja) / sqrt(n_municipios))
#Salários médios pagos a produtores e trabalhadores da cultura de soja
pnpb %>%
group_by(polos) %>%
summarise(n_municipios = n(),
mean_match = mean(s.soja),
std_error = sd(s.soja) / sqrt(n_municipios))
################################################################################
#A diferença de média é estatisticamente significativa a 95% de
#confidencialidade:
#Produtividade da soja (quantidade(t)/área plantada(hec))
with(pnpb, t.test(prod_soja ~ polos))
#Rendimento médio da soja (R$/quantidade(t))
with(pnpb, t.test(rm_soja ~ polos))
#Salários médios pagos a produtores e trabalhadores da cultura de soja
with(pnpb, t.test(s.soja ~ polos))
#p-valor < 0.05, rejeita H0, existem evidências de que as médias são diferentes.
################################################################################
#Diferença de médias: variáveis de pré-tratamento----
#total.contratos: número de contratos via PRONAF
#valores.totais: valores totais recebidos por município via PRONAF, deflacionado pelo IPCA (base=2017)
#d.bio: proxy de demanda de biodiesel, número de ônibus e caminhões por município
#pib.per.capta: valor do pib per capta municipal, deflacionado pelo IPCA (base=2017)
pnpb_cov <- c('total.contratos','valores.totais','d.bio','vaba','t')
pnpb %>%
group_by(polos) %>%
select(one_of(pnpb_cov)) %>%
summarise_all(funs(mean(.,na.rm=TRUE)))
lapply(pnpb_cov,function(v) {
t.test(pnpb[,v] ~ pnpb[,'polos'])
})
################################################################################
m_ps <- glm(polos ~ total.contratos + valores.totais + d.bio +
vaba + t,family=binomial(),data=pnpb)
summary(m_ps)
stargazer(m_ps,type='text',dep.var.labels=c('Tratamento'), out='Modelo0.html')
#Calculando as probabilidades de participar do programa:
prs_df <- data.frame(pr_score=predict(m_ps,type="response"),
polos=m_ps$model$polos)
head(prs_df)
################################################################################
labs <- paste('Participa do Projeto Polos de Biodiesel:',c("Sim","Não"))
prs_df %>%
mutate(polos=ifelse(polos==1, labs[1],labs[2]
)) %>%
ggplot(aes(x=pr_score)) + geom_histogram(color="white") +
facet_wrap(~polos) + xlab('Probabilidade de participar do projeto polos') +
ylab('Nº Municípios') +
theme_bw()
################################################################################
#Esse comando é necessário quando existem variáveis missing na amostra.
#  pnpb_nomiss <- pnpb %>%
#    select(prod_soja,polos,one_of(pnpb_cov)) %>%
#    na.omit()
#Verifica a dimensão do data frame após a exclusão das missings
#  dim(pnpb)
#  dim(pnpb_nomiss)
#Iniciando matching----
matching <- matchit(polos ~ total.contratos + valores.totais + d.bio +
vaba + t,data=pnpb,link="probit",method="nearest",
ratio=1)
#Resumo estatístico após o pareamento----
summary(matching)
#Gráfico de ajustamento das covariadas antes e depois do pareamento----
plot(matching)
#Sobreposição dos grupos tratamento e controle após o pareamento----
bal.plot(matching,var.name='distance')
#Declarando base após matching----
psm <- match.data(matching)
head(psm)
dim(psm)
#Verificando as médias das covariadas após o pareamento----
psm %>%
group_by(polos) %>%
select(one_of(pnpb_cov)) %>%
summarise_all(funs(mean))
lapply(pnpb_cov,function(v) {
t.test(psm[,v] ~ psm$polos)
})
rm(pnpb_nomiss,prs_df,m_ps,matching,labs,pnpb_cov)
summary(psm)
table(psm$uf)
rm(list=ls())
q()
#Carregando pacotes----
if(!require(dplyr))
install.packages("dplyr")
if(!require(stringr))
install.packages("stringr")
if(!require(readxl))
install.packages("readxl")
if(!require(tidyverse))
install.packages("tidyverse")
#Limpando memória----
rm(list=ls())
#Diretório local de trabalho----
setwd("C:/Users/igorf/Documents/GitHub/dissertacao/dataset/base/anos/2003")
#Importando tabelas----
qprod <- "https://raw.githubusercontent.com/igorfdeoliv/dissertacao/main/dataset/base/anos/2003/quantidade_produzida.csv"
hprod <- "https://raw.githubusercontent.com/igorfdeoliv/dissertacao/main/dataset/base/anos/2003/area_plantada.csv"
vprod <- "https://raw.githubusercontent.com/igorfdeoliv/dissertacao/main/dataset/base/anos/2003/valor_producao.csv"
demanda <- "https://raw.githubusercontent.com/igorfdeoliv/dissertacao/main/dataset/base/anos/2003/demanda.csv"
contratos <- "https://raw.githubusercontent.com/igorfdeoliv/dissertacao/main/dataset/base/anos/2003/bacen.csv"
salarios <- "https://raw.githubusercontent.com/igorfdeoliv/dissertacao/main/dataset/base/anos/2003/rais.csv"
#Gerando e juntando tabelas de quantidade e area
qprod <- read.csv(qprod,sep=";",dec=".")
hprod <- read.csv(hprod,sep=";",dec=".")
df1 <- right_join(qprod,hprod,by='Cód.')
names(df1) <- c("ano","cod_mun","Município","q_dende","q_girassol",
"q_mamona","q_soja","drop1","drop2","h_dende",
"h_girassol","h_mamona","h_soja")
df1 <- df1 %>%
select(-"drop1",-"drop2")
rm(qprod,hprod)
vprod <- read.csv(vprod,sep=";",dec=".")
df2 <- right_join(df1,vprod,by="Município")
names(df2) <- c("ano","cod_mun","chave","q_dende","q_girassol",
"q_mamonoa","q_soja","h_dende","h_girassol",
"h_mamona","h_soja","drop1","drop2","v_dende",
"v_girassol","v_mamona","v_soja")
df2 <- df2 %>%
select(-"drop1",-"drop2")
rm(vprod)
#Gerando e juntando a tabela de salarios ao df anterior
salarios <- read.csv(salarios,sep=";",dec=".")
df3 <- right_join(df2,salarios,by="chave")
df3 <- df3 %>%
filter(cod_mun!="NA")
names(df3) <- c("ano","cod_mun","chave","q_dende","q_girassol",
"q_mamona","q_soja","h_dende","h_girassol",
"h_mamona","h_soja","v_dende","v_girassol",
"v_mamona","v_soja","drop1","drop2","drop3",
"drop4","dende1","dende2","girassol1","girassol2",
"mamona1","mamona2","soja1","soja2","drop5")
df3 <- df3 %>%
mutate("s_dende"=(df3$dende1+df3$dende2)) %>%
mutate("s_girassol"=(df3$girassol1+df3$girassol2)) %>%
mutate("s_mamona"=(df3$mamona1+df3$mamona2)) %>%
mutate("s_soja"=(df3$soja1+df3$soja2)) %>%
select(-"drop1",-"drop2",-"drop3",-"drop4",-"drop5",
-"dende1",-"dende2",-"girassol1",-"girassol2",
-"mamona1",-"mamona2",-"soja1",-"soja2")
rm(salarios)
#Gerando e juntando tabela de demanda ao df anterior
demanda <- read.csv(demanda,sep=";",dec=".")
df4 <- right_join(df3,demanda,by="chave")
df4 <- df4 %>%
filter(cod_mun!="NA")
names(df4) <- c("ano","cod_mun","chave","q_dende","q_girassol",
"q_mamona","q_soja","h_dende","h_girassol","h_mamona",
"h_soja","v_dende","v_girassol","v_mamona","v_soja",
"s_dende","s_girassol","s_mamona","s_soja","drop1",
"drop2","drop3","drop4","drop5","drop6","demanda_bio")
df4 <- df4 %>%
select(-"drop1",-"drop2",-"drop3",-"drop4",-"drop5",-"drop6")
rm(demanda)
#Gerando e juntando tabela de contratos ao df anterior
pronaf <- read.csv(contratos,sep=";",dec=".")
df <- pronaf %>%
filter(estado=="DF")
x <- df %>%
group_by(estado) %>%
summarise(t.contratos=sum(as.numeric(total.contratos),na.rm=TRUE))
y <- df %>%
group_by(estado) %>%
summarise(v.totais=sum(as.numeric(valores.totais),na.rm=TRUE))
df <- right_join(x,y,by="estado")
df<- df %>%
mutate("ano"=2003) %>%
mutate("chave"='BRASILIA (DF)') %>%
mutate("municipio"='BRASILIA')
df<- df[,c(4,5,1,6,2,3)]
names(df) <- c("ano","chave","estado","municipio","total.contratos",
"valores.totais")
rm(x,y)
pronaf <- pronaf %>%
filter(estado!="DF")
pronaf <- rbind(pronaf,df)
df5 <- right_join(df4,pronaf,by="chave")
names(df5) <- c("ano","cod_mun","chave","q.dende","q.girassol","q.mamona",
"q.soja","h.dende","h.girassol","h.mamona","h.soja",
"v.dende","v.girassol","v.mamona","v.soja","s.dende",
"s.girassol","s.mamona","s.soja","d.bio","ano.y",
"estado","municipio","total.contratos","valores.totais")
b2003 <- df5 %>%
filter(cod_mun!="NA") %>%
select(-"ano.y",-"estado",-"municipio")
rm(df,df1,df2,df3,df4,df5,contratos,pronaf)
#Incluindo informações municipais
setwd ("C:/Users/igorf/Documents/GitHub/dissertacao/dataset/base")
pibmun <- read.csv('pibmun.csv',sep=";",dec=",")
pibmun <- pibmun %>%
filter(ano==2003)
b2003 <- right_join(b2003,pibmun,by="cod_mun")
b2003 <- b2003 %>%
filter(chave.x!="NA") %>%
select(-"ano.y",-"chave.y",-"estado",-"municipio")
names(b2003) <- c("ano","cod_mun","chave","q.dende","q.girassol",
"q.mamona","q.soja","h.dende","h.girassol","h.mamona",
"h.soja","v.dende","v.girassol","v.mamona","v.soja",
"s.dende","s.girassol","s.mamona","s.soja","d.bio",
"total.contratos","valores.totais","cod_uf","uf",
"semiarido","vaba","vabi","vabs","vabadm","vabt",
"t","pib","pib.per.capta")
b2003 <- b2003[,c(1,2,23,24,25,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,
19,20,21,22,26,27,28,29,30,31,32,33)]
rm(pibmun)
#Inlcuindo amc----
amc <- read_excel("~/GitHub/dissertacao/dataset/ibge/amc/AMC_1980_2010.xlsx",
col_name =c("municipio","cod_mun","amc"))
b2003 <- b2003 %>%
mutate(cod_mun=as.character(cod_mun))
b2003 <- right_join(b2003,amc,by="cod_mun")
b2003 <- b2003 %>%
filter(ano!="NA") %>%
select(-"municipio")
rm(amc)
#Deflacionando valores----
deflator <- read_excel("~/GitHub/dissertacao/dataset/ipea/ipeadata[18-01-2021-09-33].xls")
x <- filter(deflator,ano==2003)
b2003 <- b2003 %>%
mutate(v.dende=(v.dende*(x$deflator))) %>%
mutate(v.girassol=(v.girassol*(x$deflator))) %>%
mutate(v.mamona=(v.mamona*(x$deflator))) %>%
mutate(v.soja=(v.soja*(x$deflator))) %>%
mutate(s.dende=(s.dende*(x$deflator))) %>%
mutate(s.girassol=(s.girassol*(x$deflator))) %>%
mutate(s.mamona=(s.mamona*(x$deflator))) %>%
mutate(s.soja=(s.soja*(x$deflator))) %>%
mutate(valores.totais=(valores.totais*(x$deflator))) %>%
mutate(vaba=(as.numeric(vaba)*(x$deflator))) %>%
mutate(vabi=(as.numeric(vabi)*(x$deflator))) %>%
mutate(vabs=(as.numeric(vabs)*(x$deflator))) %>%
mutate(vabadm=(as.numeric(vabadm)*(x$deflator))) %>%
mutate(vabt=(as.numeric(vabt)*(x$deflator))) %>%
mutate(t=(as.numeric(t)*(x$deflator))) %>%
mutate(pib=(as.numeric(pib)*(x$deflator))) %>%
mutate(pib.per.capta=(as.numeric(pib.per.capta)*(x$deflator)))
rm(x,deflator)
#Categorizando a variavel semiarido
b2003 <- b2003 %>%
mutate(semiarido=if_else(semiarido=="Sim",1,0))
b2003 <- b2003[,c(1,2,34,3,4,5,6,7,8,9,10,11,12,13,14,15,
16,17,18,19,20,21,22,23,24,25,26,27,28,
29,30,31,32,33)]
est_pop <- read_excel("~/GitHub/dissertacao/dataset/ibge/est_pop/POP2003_TCU.xls",
skip = 5,col_name=c("uf","cod_uf","cod_mun","municipio","est_pop"))
View(est_pop)
est_pop <- est_pop %>%
mutate(municipio=toupper(municipio)) %>%
mutate(municipio=chartr("ÁÉÍÓÚÃÕÂÊÔÇ'-", "AEIOUAOAEOC  ",municipio)) %>%
mutate("chave"=str_c(municipio," ","(",uf,")") ) %>%
select("chave","est_pop")
b2003 <- right_join(b2003,est_pop,by="chave")
b2003 <- b2003 %>%
filter(ano!="NA")
rm(est_pop)
#Criando dummy polos----
polos <- read_csv2('C:/Users/igorf/Documents/GitHub/dissertacao/dataset/projeto_polos/polos.csv')
polos$cod_mun <- as.character(polos$cod_mun)
b2003 <- full_join(b2003, polos, by = 'cod_mun')
b2003 <- b2003 %>%
mutate(dummy1 = ifelse(is.na(polo), 0, 1)) %>%
filter(ano!="NA") %>%
select(-"amc.y",-"chave.y",-"estado",-"municipio",-"polo")
names(b2003) <- c("ano","cod_mun","amc","cod_uf","uf","semiarido","chave",
"q.dende","q.girassol","q.mamona","q.soja","h.dende",
"h.girassol","h.mamona","h.soja","v.dende","v.girassol",
"v.mamona","v.soja","s.dende","s.girassol","s.mamona",
"s.soja","d.bio","total.contratos","valores.totais",
"vaba","vabi","vabs","vabadm","vabt","t","pib",
"pib.per.capta","est_pop","polos")
b2003 <- b2003[,c(1,2,3,6,36,4,5,7,8,9,10,11,12,13,14,15,16,
17,18,19,20,21,22,23,24,25,26,27,28,29,30,
31,32,33,34,35)]
rm(polos)
View(b2003)
q()
